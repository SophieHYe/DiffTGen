package myprinter;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import org.apache.commons.lang3.reflect.FieldUtils;


public class FieldPrinter2
{
    public String print(Object x) {

	return print(x, 5);
    }

    public String print(Object x, int max_depth) {

	StringBuilder sb = new StringBuilder();
	print(sb, x, 0, max_depth);
	return sb.toString();
    }
    
    private void print(StringBuilder sb, Object x, int depth, int max_depth) {

	if (depth >= max_depth) {
	    //===============
	    sb.append("*** MAX_DEPTH EXCEEDED! ***");
	    sb.append("\n");
	    //===============
	    return;
	}

	if (x == null) {
	    return;
	}
	
	Class x_class = x.getClass();
	if (x_class.isPrimitive() ||
	    (x instanceof Boolean) ||
	    (x instanceof Byte) ||
	    (x instanceof Character) ||
	    (x instanceof Short) ||
	    (x instanceof Integer) ||
	    (x instanceof Long) ||
	    (x instanceof Float) ||
	    (x instanceof Double) ||
	    (x instanceof String)) {

	    sb.append("Primitive Type: " + x);
	    sb.append("\n");
	    return;
	}

	String x_class_name = x_class.getName();
	
	//================
	sb.append("--- Class Type (" + depth + ") ---"); sb.append("\n");
	sb.append(x_class_name); sb.append("\n");
	//================

	if ("java.lang.Class".equals(x_class_name)) {
	    //Is this OK?
	    return;
	}
	
	if (x_class.isArray()) {
	    Object[] elem_arr = convertToObjectArray(x);
	    for (Object elem : elem_arr) {
		print(sb, elem, depth+1, max_depth);
	    }
	    return;
	}
	
	if (x instanceof List) {
	    List elem_list = (List) x;
	    for (Object elem : elem_list) {
		print(sb, elem, depth+1, max_depth);
	    }	
	    return;
	}

	if (x instanceof Set) {
	    List elem_list = new ArrayList((Set) x);
	    for (Object elem : elem_list) {
		print(sb, elem, depth+1, max_depth);
	    }
	    return;
	}
	
	if (x instanceof Map) {
	    Map map_x = (Map) x;
	    List elem_list = new ArrayList(map_x.keySet());
	    for (Object elem : elem_list) {
		sb.append("<<<< KEY >>>>"); sb.append("\n");
		print(sb, elem, depth+1, max_depth);
		sb.append("<<<< VALUE >>>>"); sb.append("\n");
		print(sb, map_x.get(elem), depth+1, max_depth);
	    }
	    return;
	}
	
	Field[] fields = FieldUtils.getAllFields(x_class);
	for (Field field : fields) {
	    sb.append(field.getName()+" (" + field.getDeclaringClass().getName() + "):");
	    sb.append("\n");
	    //Ignore Final Fields
	    if (Modifier.isFinal(field.getModifiers())) {
		sb.append("FINAL FIELD, IGNORE."); sb.append("\n");
		continue;
	    }

	    //Ignore Static Fields
	    if (Modifier.isStatic(field.getModifiers())) {
		sb.append("STATIC FIELD, IGNORE."); sb.append("\n");
		continue;
	    }
	    
	    Object field_value = null;
	    try { field_value = FieldUtils.readField(field, x, true); }
	    catch (Throwable t) {
		System.err.println(t);
	    }
	    if (field_value == null) { continue; }
	    
	    print(sb, field_value, depth+1, max_depth);
	}
    }

    static Object[] convertToObjectArray(Object array) {
	Class ofArray = array.getClass().getComponentType();
	if (ofArray.isPrimitive()) {
	    List ar = new ArrayList();
	    int length = Array.getLength(array);
	    for (int i = 0; i < length; i++) {
		ar.add(Array.get(array, i));
	    }
	    return ar.toArray();
	}
	else {
	    return (Object[]) array;
	}
    }
}
